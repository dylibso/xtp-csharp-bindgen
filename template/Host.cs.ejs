namespace <%- project.name %>;

using Extism;

using System;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Nodes;
using System.Buffers.Text;
using System.Buffers;

public class Host
{
    <% schema.exports.forEach(ex => { %>
    [UnmanagedCallersOnly(EntryPoint = "<%- ex.name %>")]
    public static int <%- csharpName(ex.name) %>()
    {
        try
        {
            <% if (ex.input) { %>
                <% if (isJsonEncoded(ex.input)) { %>
                    Pdk.Log(LogLevel.Debug, "<%- ex.name %>: getting JSON input");
                    var input = Pdk.GetInputJson(PdkJsonContext.Instance.<%- toCSharpTypeX(ex.input.xtpType) %>);
                <% } else if (isEnum(ex.input)) { %>
                    var str = Pdk.GetInputString();
                    var input = Enum.TryParse< <%- toCSharpTypeX(ex.input.xtpType) %> >(str, out var value) ? value : throw new Exception($"Could not parse '{str}' into a <%- toCSharpTypeX(ex.input.xtpType) %>");
                <% } else if (isString(ex.input)) { %>
                    Pdk.Log(LogLevel.Debug, "<%- ex.name %>: getting string input");
                    var input = Pdk.GetInputString();
                <% } else { %>
                    Pdk.Log(LogLevel.Debug, "<%- ex.name %>: getting bytes input");
                    var input = Pdk.GetInput();
                <% } %>

                Pdk.Log(LogLevel.Debug, "<%- ex.name %>: calling implementation function");
                <% if (ex.output?.xtpType) { %>
                    var output = Program.<%- csharpName(ex.name) %>(input);
                <% } else { %>
                    Program.<%- csharpName(ex.name) %>(input);
                <% } %>
            <% } else { %>
                <% if (ex.output) { %>
                    var output = Program.<%- csharpName(ex.name) %>();
                <% } else { %>
                    Program.<%- csharpName(ex.name) %>();
                <% } %>
            <% } %>

            <% if (ex.output) { %>
                <% if (isJsonEncoded(ex.output)) { %>
                    Pdk.Log(LogLevel.Debug, "<%- ex.name %>: setting JSON output");
                    Pdk.SetOutputJson(output, PdkJsonContext.Instance.<%- toCSharpTypeX(ex.output.xtpType) %>);
                <% } else if (isString(ex.output)) { %>
                    Pdk.Log(LogLevel.Debug, "<%- ex.name %>: setting string output");
                    Pdk.SetOutput(output);
                <% } else { %>
                    Pdk.Log(LogLevel.Debug, "<%- ex.name %>: setting bytes output");
                    Pdk.SetOutput(output);
                <% } %>
            <% } %>

            Pdk.Log(LogLevel.Debug, "<%- ex.name %>: returning");
            return 0;
        }
        catch (Exception ex)
        {
            Pdk.Log(LogLevel.Error, ex.Message);
            Pdk.SetError(ex.Message);
            return -1;
        }
    }
    <% }) %>

    <% schema.imports.forEach(imp => { %>
    [DllImport("extism", EntryPoint = "<%- imp.name %>")]
    private static extern <%- imp.output?.xtpType ? "ulong" : "void" %> <%- imp.name %>Impl(<%- imp.input ? "ulong input" : "" %>);

    <% if (hasComment(imp)) { %>
        /// <summary> 
        /// <%- formatCommentBlock(imp.description, '///') %>
        /// </summary>
    <% } %>
    <% if (hasComment(imp.input)) { -%>
        /// <param name="input"><%= formatCommentLine(imp.input.description) %></param>
    <% } -%>
    <% if (hasComment(imp.output)) { -%>
        /// <returns><%= formatCommentLine(imp.output.description) %></returns>
    <% } %>
    public static <%- imp.output?.xtpType ? toCSharpTypeX(imp.output.xtpType) : "void" %> <%- csharpName(imp.name) %>(<%- imp.input ? `${toCSharpTypeX(imp.input.xtpType)} input` : "" %>)
    {
        <% if (imp.input) { %>
            <% if (isJsonEncoded(imp.input)) { %>
                Pdk.Log(LogLevel.Debug, "<%- imp.name %>: setting JSON input");
                var json = JsonSerializer.Serialize(input, PdkJsonContext.Instance.<%- toCSharpTypeX(imp.input.xtpType) %>);
                var mem = Pdk.Allocate(json);
            <% } else if (isEnum(imp.input)) { %>
                var str = Enum.GetName(typeof(<%- toCSharpTypeX(imp.input.xtpType) %>), input);
                var mem = Pdk.Allocate(str);
            <% } else if (isString(imp.input)) { %>
                var mem = Pdk.Allocate(input);
            <% } else { %>
                var mem = Pdk.Allocate(input);
            <% } %>

            <% if (imp.output) { %>
            var offs = <%- imp.name %>Impl(mem.Offset);
            <% } else { %>
            <%- imp.name %>Impl(mem.Offset);
            <% } %>
        <% } else { %>
            <% if (imp.output) { %>var offs = <% } %><%- imp.name %>Impl();
        <% } %>

        <% if (imp.output) { %>
            <% if (isJsonEncoded(imp.output)) { %>
                var outputJson = MemoryBlock.Find(offs).ReadBytes();
                return JsonSerializer.Deserialize(outputJson, PdkJsonContext.Instance.<%- toCSharpTypeX(imp.output.xtpType) %>);
            <% } else if (isEnum(imp.output)) { %>
                var outputStr = MemoryBlock.Find(offs).ReadString();
                var str = Pdk.GetInputString();
                var input = Enum.TryParse< <%- toCSharpType(imp.output.xtpType) %> >(outputStr, out var value) ? value : throw new Exception($"Could not parse '{str}' into a <%- toCSharpTypeX(imp.output.xtpType) %>");
                return value;
            <% } else if (isString(imp.output)) { %>
                return MemoryBlock.Find(offs).ReadString();
            <% } else { %>
                return MemoryBlock.Find(offs).ReadBytes();
            <% } %>
        <% } %>
    }
    <% }) %>
}

<% Object.values(schema.schemas).forEach(s => { %>
    <% if (isEnum(s)) { %>
        public enum <%- s.name %>
        {
            <% s.enum.forEach(v => { %>
            <%- v %>,
            <% }) %>
        }
    <% } else { %>
        public class <%- s.name %>
        {
            <% Object.values(s.properties).forEach(p => { %>
            [JsonPropertyName("<%- p.name %>")]
            <% if (p.type === 'buffer') { %>
            [JsonConverter(typeof(Base64JsonConverter))]
            <% } %>
            public <%- toCSharpTypeX(p.xtpType) %> <%- csharpName(p.name) %> { get; set; }
            <% }) %>
        }
    <% } %>
<% }) %>

<% serializableTypes(schema).forEach(s => { %>
    [JsonSerializable(typeof(<%- s %>))]
<% }) %>
public partial class PdkJsonContext : JsonSerializerContext
{
    public static PdkJsonContext Instance { get; } = new PdkJsonContext(JsonOptions());

    internal static JsonSerializerOptions JsonOptions()
    {
        var options = new JsonSerializerOptions();
        options.Converters.Add(new JsonStringEnumConverter());
        options.Converters.Add(new Base64JsonConverter());
        
        return options;
    }
}

public class Base64JsonConverter : JsonConverter<byte[]>
{
    public override byte[] Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType != JsonTokenType.String)
        {
            throw new JsonException("Expected string value for Base64 encoded data.");
        }

        string base64String = reader.GetString();
        return Convert.FromBase64String(base64String);
    }

    public override void Write(Utf8JsonWriter writer, byte[] value, JsonSerializerOptions options)
    {
        writer.WriteStringValue(Convert.ToBase64String(value));
    }
}
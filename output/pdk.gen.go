// THIS FILE WAS GENERATED BY `xtp-go-bindgen`. DO NOT EDIT.
package main

import (
	"errors"
	pdk "github.com/extism/go-pdk"
)

//export voidFunc
func _voidFunc() int32 {
	var err error
	err = voidFunc()
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	return 0
}

//export arrayFunc
func _arrayFunc() int32 {
	var err error
	var input []Fruit
	err = pdk.InputJSON(&input)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	output, err := arrayFunc(input)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	err = pdk.OutputJSON(output)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	return 0
}

//export primitiveTypeFunc
func _primitiveTypeFunc() int32 {
	var err error
	input := pdk.InputString()

	output, err := primitiveTypeFunc(input)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	err = pdk.OutputJSON(output)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	return 0
}

//export referenceTypeFunc
func _referenceTypeFunc() int32 {
	var err error
	input, err := stringToFruit(pdk.InputString())
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	output, err := referenceTypeFunc(input)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	err = pdk.OutputJSON(output)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	return 0
}

//go:wasmimport extism:host/user eatAFruit
func _eatAFruit(uint64) uint64

//go:wasmimport extism:host/user kv_read
func _kv_read(uint64) uint64

//go:wasmimport extism:host/user kv_write
func _kv_write(uint64)

// Parameters to write to kv store
type WriteParams struct {
	// key
	Key *string `json:"key"`
	// value
	Value []byte `json:"value"`
}

// A set of available fruits you can consume
type Fruit int

const (
	Apple Fruit = iota
	Orange
	Banana
	Strawberry
)

func (v Fruit) String() string {
	switch v {
	case Apple:
		return "apple"
	case Orange:
		return "orange"
	case Banana:
		return "banana"
	case Strawberry:
		return "strawberry"
	default:
		return ""
	}
}

func stringToFruit(s string) (Fruit, error) {
	switch s {
	case "apple":
		return Apple, nil
	case "orange":
		return Orange, nil
	case "banana":
		return Banana, nil
	case "strawberry":
		return Strawberry, nil
	default:
		return Fruit(-1), errors.New("unable to convert string to Fruit")
	}
}

// A set of all the enemies of pac-man
type GhostGang int

const (
	Blinky GhostGang = iota
	Pinky
	Inky
	Clyde
)

func (v GhostGang) String() string {
	switch v {
	case Blinky:
		return "blinky"
	case Pinky:
		return "pinky"
	case Inky:
		return "inky"
	case Clyde:
		return "clyde"
	default:
		return ""
	}
}

func stringToGhostGang(s string) (GhostGang, error) {
	switch s {
	case "blinky":
		return Blinky, nil
	case "pinky":
		return Pinky, nil
	case "inky":
		return Inky, nil
	case "clyde":
		return Clyde, nil
	default:
		return GhostGang(-1), errors.New("unable to convert string to GhostGang")
	}
}

// A complex json object
type ComplexObject struct {
	// an array
	Array []GhostGang `json:"array"`
	// I can override the description for the property here
	Ghost GhostGang `json:"ghost"`
	// A boolean prop
	ABoolean bool `json:"aBoolean"`
	// An string prop
	AString string `json:"aString"`
	// An int prop
	AnInt int32 `json:"anInt"`
	// A datetime object, we will automatically serialize and deserialize
	// this for you.
	AnOptionalDate *string `json:"anOptionalDate"`
}

// EatAFruit This is a host function. Right now host functions can only be the type (i64) -&gt; i64.
// We will support more in the future. Much of the same rules as exports apply.
// It takes input of Fruit (A set of available fruits you can consume)
// And it returns bool (boolean encoded as json)
func EatAFruit(input Fruit) (*bool, error) {
	mem := pdk.AllocateString(input.String())

	offs := _eatAFruit(mem.Offset())

	var output bool
	err := pdk.JSONFrom(offs, &output)
	if err != nil {
		return nil, err
	}
	return &output, nil

}

// Kv_read kvread
// It takes input of string (the key)
// And it returns []byte (the raw byte values at key)
func Kv_read(input string) ([]byte, error) {
	mem := pdk.AllocateString(input)

	offs := _kv_read(mem.Offset())

	outputMem := pdk.FindMemory(offs)
	return outputMem.ReadBytes(), nil

}

// Kv_write kvwrite
// It takes input of WriteParams (Parameters to write to kv store)
func Kv_write(input WriteParams) error {
	mem, err := pdk.AllocateJSON(&input)
	if err != nil {
		return err
	}

	_kv_write(mem.Offset())

	return nil

}

// Note: leave this in place, as the Go compiler will find the `export` function as the entrypoint.
func main() {}
